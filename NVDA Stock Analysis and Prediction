{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8225434,"sourceType":"datasetVersion","datasetId":4877059}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Introduction\n\nIn this notebook I will be analysing the past performance of NVDA using visualisations based off important financial markers. After coming to a conclusion I will develop a learning model based on the stock data from the year 2000 until the year 2022 and attempt to make accurate predictions for NVDA's 2023 performance.","metadata":{}},{"cell_type":"markdown","source":"# Loading and Cleaning Data","metadata":{}},{"cell_type":"code","source":"#Importing libraries used for data analysis and developing learning model\nimport pandas as pd\nimport numpy as np\nimport matplotlib as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model as lm\n\n# Ignore warnings \nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-06-05T00:38:42.720911Z","iopub.execute_input":"2024-06-05T00:38:42.721464Z","iopub.status.idle":"2024-06-05T00:38:42.727426Z","shell.execute_reply.started":"2024-06-05T00:38:42.721431Z","shell.execute_reply":"2024-06-05T00:38:42.726182Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"#Loading the data into the notebook\ndf_csv = '/kaggle/input/nvidia-corp-share-price-2000-2024/NVDA.csv'\ndf = pd.read_csv(df_csv)","metadata":{"execution":{"iopub.status.busy":"2024-06-05T00:38:45.739107Z","iopub.execute_input":"2024-06-05T00:38:45.740232Z","iopub.status.idle":"2024-06-05T00:38:45.775701Z","shell.execute_reply.started":"2024-06-05T00:38:45.740185Z","shell.execute_reply":"2024-06-05T00:38:45.774504Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"Now that we have successfully loaded our data and libraries we will begin cleaning our data. We will do this by removing rows with null values and ensuring that all columns are the correct data type.","metadata":{}},{"cell_type":"code","source":"#Printing a sample of our dataframe\ndf.sample(5)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-06-05T00:49:30.218125Z","iopub.execute_input":"2024-06-05T00:49:30.219254Z","iopub.status.idle":"2024-06-05T00:49:30.234909Z","shell.execute_reply.started":"2024-06-05T00:49:30.219216Z","shell.execute_reply":"2024-06-05T00:49:30.233730Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"            Date      Open      High       Low   Close  Adj Close     Volume\n1243  2004-12-14  1.890833  1.929167  1.887500  1.9275   1.768100   51298800\n3817  2015-03-09  5.640000  5.695000  5.627500  5.6525   5.448849   22238800\n2452  2009-10-02  3.455000  3.537500  3.435000  3.4625   3.176159   61247600\n1835  2007-04-24  5.316667  5.473333  5.281667  5.4250   4.976364  102808800\n3673  2014-08-11  4.755000  4.775000  4.712500  4.7250   4.498276   34462400","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1243</th>\n      <td>2004-12-14</td>\n      <td>1.890833</td>\n      <td>1.929167</td>\n      <td>1.887500</td>\n      <td>1.9275</td>\n      <td>1.768100</td>\n      <td>51298800</td>\n    </tr>\n    <tr>\n      <th>3817</th>\n      <td>2015-03-09</td>\n      <td>5.640000</td>\n      <td>5.695000</td>\n      <td>5.627500</td>\n      <td>5.6525</td>\n      <td>5.448849</td>\n      <td>22238800</td>\n    </tr>\n    <tr>\n      <th>2452</th>\n      <td>2009-10-02</td>\n      <td>3.455000</td>\n      <td>3.537500</td>\n      <td>3.435000</td>\n      <td>3.4625</td>\n      <td>3.176159</td>\n      <td>61247600</td>\n    </tr>\n    <tr>\n      <th>1835</th>\n      <td>2007-04-24</td>\n      <td>5.316667</td>\n      <td>5.473333</td>\n      <td>5.281667</td>\n      <td>5.4250</td>\n      <td>4.976364</td>\n      <td>102808800</td>\n    </tr>\n    <tr>\n      <th>3673</th>\n      <td>2014-08-11</td>\n      <td>4.755000</td>\n      <td>4.775000</td>\n      <td>4.712500</td>\n      <td>4.7250</td>\n      <td>4.498276</td>\n      <td>34462400</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#Seeing how many null values there are per column\ndf.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T00:49:19.542449Z","iopub.execute_input":"2024-06-05T00:49:19.542918Z","iopub.status.idle":"2024-06-05T00:49:19.553747Z","shell.execute_reply.started":"2024-06-05T00:49:19.542885Z","shell.execute_reply":"2024-06-05T00:49:19.552528Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"Date         0\nOpen         0\nHigh         0\nLow          0\nClose        0\nAdj Close    0\nVolume       0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"#Checking the data type of each column\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-05T00:49:14.043130Z","iopub.execute_input":"2024-06-05T00:49:14.043885Z","iopub.status.idle":"2024-06-05T00:49:14.066043Z","shell.execute_reply.started":"2024-06-05T00:49:14.043849Z","shell.execute_reply":"2024-06-05T00:49:14.064540Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 6116 entries, 0 to 6115\nData columns (total 7 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Date       6116 non-null   object \n 1   Open       6116 non-null   float64\n 2   High       6116 non-null   float64\n 3   Low        6116 non-null   float64\n 4   Close      6116 non-null   float64\n 5   Adj Close  6116 non-null   float64\n 6   Volume     6116 non-null   int64  \ndtypes: float64(5), int64(1), object(1)\nmemory usage: 334.6+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Here we can see that all columns' data types are correct except for Date. To fix this we will use the 'to_Date' function in Pandas.","metadata":{}},{"cell_type":"code","source":"#Changing 'Date' column from object to datetime\ndf['Date'] = pd.to_datetime(df['Date'])\n\n#Checking that column data type was changed successfully\ndf.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-06-05T00:52:18.519064Z","iopub.execute_input":"2024-06-05T00:52:18.519506Z","iopub.status.idle":"2024-06-05T00:52:18.535409Z","shell.execute_reply.started":"2024-06-05T00:52:18.519472Z","shell.execute_reply":"2024-06-05T00:52:18.534295Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"Date         datetime64[ns]\nOpen                float64\nHigh                float64\nLow                 float64\nClose               float64\nAdj Close           float64\nVolume                int64\ndtype: object"},"metadata":{}}]}]}